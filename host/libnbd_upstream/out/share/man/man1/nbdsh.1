.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdsh 1"
.TH nbdsh 1 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdsh \- network block device (NBD) shell
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& $ nbdsh
\& 
\& Welcome to nbdsh, the shell for interacting with
\& Network Block Device (NBD) servers.
\& 
\& The ‘nbd’ module has already been imported and there
\& is an open NBD handle called ‘h’.
\& 
\& nbd> h.connect_command (["nbdkit", "\-s", "memory", "1G"])
\& nbd> h.get_size ()
\& 1073741824
\& nbd> buf = b"hello, world"
\& nbd> h.pwrite (buf, 0, 0)
\& nbd> exit()
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
nbdsh is a Python-based client shell for accessing Network Block
Device (\s-1NBD\s0) servers.
.PP
For documentation about the libnbd \s-1API\s0 please open the shell and type:
.PP
.Vb 1
\& help (nbd)
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Print the size of an \s-1NBD\s0 export"
.IX Subsection "Print the size of an NBD export"
The \fI\-u\fR option connects to an \s-1NBD URI.\s0  The \fI\-c\fR option lets
you execute single Python statements from the command line.  Combining
these two options lets you print the size in bytes of an \s-1NBD\s0 export:
.PP
.Vb 2
\& $ nbdsh \-u nbd://localhost \-c \*(Aqprint (h.get_size ())\*(Aq
\& 1073741824
.Ve
.SS "Hexdump the boot sector of an \s-1NBD\s0 export"
.IX Subsection "Hexdump the boot sector of an NBD export"
Using \fI\-c \-\fR you can feed a whole Python program to the standard
input of nbdsh:
.PP
.Vb 2
\& nbdsh \-c \- <<\*(AqEOF\*(Aq
\& from subprocess import *
\& 
\& h.connect_uri ("nbd://localhost")
\& bootsect = h.pread (512, 0)
\& p = Popen ("hexdump \-C", shell=True, stdin=PIPE)
\& p.stdin.write (bootsect)
\& EOF
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
.PD
Display brief command line help and exit.
.IP "\fB\-\-base\-allocation\fR" 4
.IX Item "--base-allocation"
Request the use of the \*(L"base:allocation\*(R" meta context, which is the
most common context used with \fInbd_block_status\fR\|(3).  This is
equivalent to calling \f(CW\*(C`h.set_meta_context (nbd.CONTEXT_BASE_ALLOCATION)\*(C'\fR in the shell prior to connecting.
.IP "\fB\-c\fR '\s-1COMMAND ...\s0'" 4
.IX Item "-c 'COMMAND ...'"
.PD 0
.IP "\fB\-\-command\fR '\s-1COMMAND ...\s0'" 4
.IX Item "--command 'COMMAND ...'"
.PD
Instead of starting an interactive shell, run a command.  This option
can be specified multiple times in order to run multiple commands.
.IP "\fB\-c \-\fR" 4
.IX Item "-c -"
.PD 0
.IP "\fB\-\-command \-\fR" 4
.IX Item "--command -"
.PD
Read standard input and execute it as a command.
.IP "\fB\-u\fR \s-1URI\s0" 4
.IX Item "-u URI"
.PD 0
.IP "\fB\-uri\fR \s-1URI\s0" 4
.IX Item "-uri URI"
.IP "\fB\-\-connect\fR \s-1URI\s0" 4
.IX Item "--connect URI"
.PD
Connect to the given \s-1NBD URI\s0.
This is equivalent to the \f(CW\*(C`h.connect_uri (URI)\*(C'\fR command in the shell.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Display the package name and version and exit.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlibnbd\fR\|(3),
\&\fIlibnbd\-security\fR\|(3),
\&\fInbdfuse\fR\|(1),
\&\fIqemu\-img\fR\|(1).
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

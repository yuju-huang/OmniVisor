.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_block_status 3"
.TH nbd_block_status 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_block_status \- send block status command to the NBD server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& typedef struct {
\&   int (*callback) (void *user_data,
\&                    const char *metacontext,
\&                    uint64_t offset, uint32_t *entries,
\&                    size_t nr_entries, int *error);
\&   void *user_data;
\&   void (*free) (void *user_data);
\& } nbd_extent_callback;
\&
\& int nbd_block_status (struct nbd_handle *h, uint64_t count,
\&                       uint64_t offset,
\&                       nbd_extent_callback extent_callback,
\&                       uint32_t flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Issue the block status command to the \s-1NBD\s0 server.  If
supported by the server, this causes metadata context
information about blocks beginning from the specified
offset to be returned. The \f(CW\*(C`count\*(C'\fR parameter is a hint: the
server may choose to return less status, or the final block
may extend beyond the requested range. If multiple contexts
are supported, the number of blocks and cumulative length
of those blocks need not be identical between contexts.
.PP
Depending on which metadata contexts were enabled before
connecting (see \fInbd_add_meta_context\fR\|(3)) and which are
supported by the server (see \fInbd_can_meta_context\fR\|(3)) this call
returns information about extents by calling back to the
\&\f(CW\*(C`extent\*(C'\fR function.  The callback cannot call \f(CW\*(C`nbd_*\*(C'\fR APIs on the
same handle since it holds the handle lock and will
cause a deadlock.  If the callback returns \f(CW\*(C`\-1\*(C'\fR, and no earlier
error has been detected, then the overall block status command
will fail with any non-zero value stored into the callback's
\&\f(CW\*(C`error\*(C'\fR parameter (with a default of \f(CW\*(C`EPROTO\*(C'\fR); but any further
contexts will still invoke the callback.
.PP
The \f(CW\*(C`extent\*(C'\fR function is called once per type of metadata available,
with the \f(CW\*(C`user_data\*(C'\fR passed to this function.  The \f(CW\*(C`metacontext\*(C'\fR
parameter is a string such as \f(CW"base:allocation"\fR.  The \f(CW\*(C`entries\*(C'\fR
array is an array of pairs of integers with the first entry in each
pair being the length (in bytes) of the block and the second entry
being a status/flags field which is specific to the metadata context.
(The number of pairs passed to the function is \f(CW\*(C`nr_entries/2\*(C'\fR.)  The
\&\s-1NBD\s0 protocol document in the section about
\&\f(CW\*(C`NBD_REPLY_TYPE_BLOCK_STATUS\*(C'\fR describes the meaning of this array;
for contexts known to libnbd, \fB<libnbd.h>\fR contains constants
beginning with \f(CW\*(C`LIBNBD_STATE_\*(C'\fR that may help decipher the values.
On entry to the callback, the \f(CW\*(C`error\*(C'\fR parameter contains the errno
value of any previously detected error.
.PP
It is possible for the extent function to be called
more times than you expect (if the server is buggy),
so always check the \f(CW\*(C`metacontext\*(C'\fR field to ensure you
are receiving the data you expect.  It is also possible
that the extent function is not called at all, even for
metadata contexts that you requested.  This indicates
either that the server doesn't support the context
or for some other reason cannot return the data.
.PP
The \f(CW\*(C`flags\*(C'\fR parameter may be \f(CW0\fR for no flags, or may contain
\&\f(CW\*(C`LIBNBD_CMD_FLAG_REQ_ONE\*(C'\fR meaning that the server should
return only one extent per metadata context where that extent
does not exceed \f(CW\*(C`count\*(C'\fR bytes; however, libnbd does not
validate that the server obeyed the flag.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
If the call is successful the function returns \f(CW0\fR.
.SH "ERRORS"
.IX Header "ERRORS"
On error \f(CW\*(C`\-1\*(C'\fR is returned.
.PP
Refer to \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3)
for how to get further details of the error.
.SH "HANDLE STATE"
.IX Header "HANDLE STATE"
The handle must be
connected and finished handshaking with the server,
otherwise this call will return an error.
.SH "VERSION"
.IX Header "VERSION"
This function first appeared in libnbd 1.0.
.PP
If you need to test if this function is available at compile time
check if the following macro is defined:
.PP
.Vb 1
\& #define LIBNBD_HAVE_NBD_BLOCK_STATUS 1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbd_add_meta_context\fR\|(3),
\&\fInbd_aio_block_status\fR\|(3),
\&\fInbd_can_meta_context\fR\|(3),
\&\fInbd_create\fR\|(3),
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

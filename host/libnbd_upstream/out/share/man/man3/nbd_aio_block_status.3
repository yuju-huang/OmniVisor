.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_aio_block_status 3"
.TH nbd_aio_block_status 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_aio_block_status \- send block status command to the NBD server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& typedef struct {
\&   int (*callback) (void *user_data,
\&                    const char *metacontext,
\&                    uint64_t offset, uint32_t *entries,
\&                    size_t nr_entries, int *error);
\&   void *user_data;
\&   void (*free) (void *user_data);
\& } nbd_extent_callback;
\&
\& typedef struct {
\&   int (*callback) (void *user_data, int *error);
\&   void *user_data;
\&   void (*free) (void *user_data);
\& } nbd_completion_callback;
\&
\& int64_t nbd_aio_block_status (struct nbd_handle *h,
\&                               uint64_t count,
\&                               uint64_t offset,
\&                               nbd_extent_callback extent_callback,
\&                               nbd_completion_callback completion_callback,
\&                               uint32_t flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Send the block status command to the \s-1NBD\s0 server.
.PP
To check if the command completed, call \fInbd_aio_command_completed\fR\|(3).
Or supply the optional \f(CW\*(C`completion_callback\*(C'\fR which will be invoked
as described in \*(L"Completion callbacks\*(R" in \fIlibnbd\fR\|(3).
.PP
Other parameters behave as documented in \fInbd_block_status\fR\|(3).
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
This call returns the 64 bit cookie of the command.
The cookie is â‰¥ \f(CW1\fR.
Cookies are unique (per libnbd handle, not globally).
.SH "ERRORS"
.IX Header "ERRORS"
On error \f(CW\*(C`\-1\*(C'\fR is returned.
.PP
Refer to \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3)
for how to get further details of the error.
.SH "HANDLE STATE"
.IX Header "HANDLE STATE"
The handle must be
connected and finished handshaking with the server,
otherwise this call will return an error.
.SH "VERSION"
.IX Header "VERSION"
This function first appeared in libnbd 1.0.
.PP
If you need to test if this function is available at compile time
check if the following macro is defined:
.PP
.Vb 1
\& #define LIBNBD_HAVE_NBD_AIO_BLOCK_STATUS 1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbd_aio_command_completed\fR\|(3),
\&\fInbd_block_status\fR\|(3),
\&\fInbd_can_meta_context\fR\|(3),
\&\fInbd_create\fR\|(3),
\&\*(L"Issuing asynchronous commands\*(R" in \fIlibnbd\fR\|(3),
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_connect_command 3"
.TH nbd_connect_command 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_connect_command \- connect to NBD server command
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& int nbd_connect_command (struct nbd_handle *h, char **argv);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Run the command as a subprocess and connect to it over
stdin/stdout.  This is for use with \s-1NBD\s0 servers which can
behave like inetd clients, such as \f(CW\*(C`nbdkit \-\-single\*(C'\fR.
.SS "Subprocess"
.IX Subsection "Subprocess"
Libnbd will fork the \f(CW\*(C`argv\*(C'\fR command and pass the \s-1NBD\s0 socket
to it using file descriptors 0 and 1 (stdin/stdout):
.PP
.Vb 5
\& ┌─────────┬─────────┐    ┌────────────────┐
\& │ program │ libnbd  │    │   NBD server   │
\& │         │         │    │       (argv)   │
\& │         │ socket ╍╍╍╍╍╍╍╍▶ stdin/stdout │
\& └─────────┴─────────┘    └────────────────┘
.Ve
.PP
When the \s-1NBD\s0 handle is closed the server subprocess
is killed.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
If the call is successful the function returns \f(CW0\fR.
.SH "ERRORS"
.IX Header "ERRORS"
On error \f(CW\*(C`\-1\*(C'\fR is returned.
.PP
Refer to \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3)
for how to get further details of the error.
.SH "HANDLE STATE"
.IX Header "HANDLE STATE"
The handle must be
newly created,
otherwise this call will return an error.
.SH "VERSION"
.IX Header "VERSION"
This function first appeared in libnbd 1.0.
.PP
If you need to test if this function is available at compile time
check if the following macro is defined:
.PP
.Vb 1
\& #define LIBNBD_HAVE_NBD_CONNECT_COMMAND 1
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example is also available as \fIexamples/connect\-command.c\fR
in the libnbd source code.
.PP
.Vb 3
\& /* This example shows how to run an NBD server
\&  * (nbdkit) as a subprocess of libnbd.
\&  */
\& 
\& #include <stdio.h>
\& #include <stdlib.h>
\& #include <string.h>
\& 
\& #include <libnbd.h>
\& 
\& int
\& main (int argc, char *argv[])
\& {
\&   struct nbd_handle *nbd;
\&   char wbuf[512], rbuf[512];
\&   size_t i;
\& 
\&   /* Create the libnbd handle. */
\&   nbd = nbd_create ();
\&   if (nbd == NULL) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Run nbdkit as a subprocess. */
\&   char *args[] = {
\&     "nbdkit",
\& 
\&     /* You must use ‘\-s’ (which tells nbdkit to serve
\&      * a single connection on stdin/stdout).
\&      */
\&     "\-s",
\& 
\&     /* It is recommended to use ‘\-\-exit\-with\-parent’
\&      * to ensure nbdkit is always cleaned up even
\&      * if the main program crashes.
\&      */
\&     "\-\-exit\-with\-parent",
\& 
\&     /* Use this to enable nbdkit debugging. */
\&     "\-v",
\& 
\&     /* The nbdkit plugin name \- this is a RAM disk. */
\&     "memory", "size=1M",
\& 
\&     /* Use NULL to terminate the arg list. */
\&     NULL
\&   };
\&   if (nbd_connect_command (nbd, args) == \-1) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Write some random data to the first sector. */
\&   for (i = 0; i < sizeof wbuf; ++i)
\&     wbuf[i] = i % 13;
\&   if (nbd_pwrite (nbd, wbuf, sizeof wbuf, 0, 0) == \-1) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Read the first sector back. */
\&   if (nbd_pread (nbd, rbuf, sizeof rbuf, 0, 0) == \-1) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Close the libnbd handle. */
\&   nbd_close (nbd);
\& 
\&   /* What was read must be exactly the same as what
\&    * was written.
\&    */
\&   if (memcmp (rbuf, wbuf, sizeof rbuf) != 0) {
\&     fprintf (stderr, "FAILED: "
\&              "read data did not match written data\en");
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   exit (EXIT_SUCCESS);
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbd_create\fR\|(3),
\&\fInbd_kill_subprocess\fR\|(3),
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

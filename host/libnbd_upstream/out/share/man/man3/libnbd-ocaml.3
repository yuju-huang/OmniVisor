.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "libnbd-ocaml 3"
.TH libnbd-ocaml 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
libnbd\-ocaml \- how to use libnbd from OCaml
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& let nbd = NBD.create () in
\& NBD.connect_uri nbd "nbd://localhost";
\& let size = NBD.get_size nbd in
\& printf "%Ld\en" size
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This manual page documents how to use libnbd to access Network Block
Device (\s-1NBD\s0) servers from the OCaml programming language.  The OCaml
bindings work very similarly to the C bindings so you should start by
reading \fIlibnbd\fR\|(3).
.SH "HANDLES"
.IX Header "HANDLES"
Create a libnbd handle of type \f(CW\*(C`NBD.t\*(C'\fR by calling \f(CW\*(C`NBD.create ()\*(C'\fR.
.PP
You can either close the handle explicitly by calling \f(CW\*(C`NBD.close\*(C'\fR or
it will be closed automatically when it is garbage collected.  If you
call any other method on a handle which you have explicitly closed
then the \s-1API\s0 will throw an \f(CW\*(C`NBD.Closed\*(C'\fR exception.
.SH "ERRORS"
.IX Header "ERRORS"
Libnbd errors are turned automatically into \f(CW\*(C`NBD.Error (str, errno)\*(C'\fR
exceptions.  This exception has two parameters.  The first is a string
which is the printable error message.  The second is the raw \f(CW\*(C`errno\*(C'\fR,
if available (see \fInbd_get_errno\fR\|(3)).  The raw \f(CW\*(C`errno\*(C'\fR is not
compatible with errors in the OCaml \f(CW\*(C`Unix\*(C'\fR module unfortunately.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
This directory contains examples written in OCaml:
.PP
https://github.com/libguestfs/libnbd/tree/master/ocaml/examples
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_aio_get_direction 3"
.TH nbd_aio_get_direction 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_aio_get_direction \- return the read or write direction
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& unsigned nbd_aio_get_direction (struct nbd_handle *h);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Return the current direction of this connection, which means
whether we are next expecting to read data from the server, write
data to the server, or both.  It returns
.IP "0" 4
We are not expected to interact with the server file descriptor from
the current state. It is not worth attempting to use \fIpoll\fR\|(2); if
the connection is not dead, then state machine progress must instead
come from some other means such as \fInbd_aio_connect\fR\|(3).
.ie n .IP """LIBNBD_AIO_DIRECTION_READ"" = 1" 4
.el .IP "\f(CWLIBNBD_AIO_DIRECTION_READ\fR = 1" 4
.IX Item "LIBNBD_AIO_DIRECTION_READ = 1"
We are expected next to read from the server.  If using \fIpoll\fR\|(2)
you would set \f(CW\*(C`events = POLLIN\*(C'\fR.  If \f(CW\*(C`revents\*(C'\fR returns \f(CW\*(C`POLLIN\*(C'\fR
or \f(CW\*(C`POLLHUP\*(C'\fR you would then call \fInbd_aio_notify_read\fR\|(3).
.Sp
Note that once libnbd reaches \fInbd_aio_is_ready\fR\|(3), this direction is
returned even when there are no commands in flight (see
\&\fInbd_aio_in_flight\fR\|(3)). In a single-threaded use of libnbd, it is not
worth polling until after issuing a command, as otherwise the server
will never wake up the poll. In a multi-threaded scenario, you can
have one thread begin a polling loop prior to any commands, but any
other thread that issues a command will need a way to kick the
polling thread out of poll in case issuing the command changes the
needed polling direction. Possible ways to do this include polling
for activity on a pipe-to-self, or using \fIpthread_kill\fR\|(3) to send
a signal that is masked except during \fIppoll\fR\|(2).
.ie n .IP """LIBNBD_AIO_DIRECTION_WRITE"" = 2" 4
.el .IP "\f(CWLIBNBD_AIO_DIRECTION_WRITE\fR = 2" 4
.IX Item "LIBNBD_AIO_DIRECTION_WRITE = 2"
We are expected next to write to the server.  If using \fIpoll\fR\|(2)
you would set \f(CW\*(C`events = POLLOUT\*(C'\fR.  If \f(CW\*(C`revents\*(C'\fR returns \f(CW\*(C`POLLOUT\*(C'\fR
you would then call \fInbd_aio_notify_write\fR\|(3).
.ie n .IP """LIBNBD_AIO_DIRECTION_BOTH"" = 3" 4
.el .IP "\f(CWLIBNBD_AIO_DIRECTION_BOTH\fR = 3" 4
.IX Item "LIBNBD_AIO_DIRECTION_BOTH = 3"
We are expected next to either read or write to the server.  If using
\&\fIpoll\fR\|(2) you would set \f(CW\*(C`events = POLLIN|POLLOUT\*(C'\fR.  If only one of
\&\f(CW\*(C`POLLIN\*(C'\fR or \f(CW\*(C`POLLOUT\*(C'\fR is returned, then see above.  However, if both
are returned, it is better to call only \fInbd_aio_notify_read\fR\|(3), as
processing the server's reply may change the state of the connection
and invalidate the need to write more commands.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
This call returns a bitmask.
.SH "ERRORS"
.IX Header "ERRORS"
This function does not fail.
.SH "VERSION"
.IX Header "VERSION"
This function first appeared in libnbd 1.0.
.PP
If you need to test if this function is available at compile time
check if the following macro is defined:
.PP
.Vb 1
\& #define LIBNBD_HAVE_NBD_AIO_GET_DIRECTION 1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbd_aio_connect\fR\|(3),
\&\fInbd_aio_in_flight\fR\|(3),
\&\fInbd_aio_is_ready\fR\|(3),
\&\fInbd_aio_notify_read\fR\|(3),
\&\fInbd_aio_notify_write\fR\|(3),
\&\fInbd_create\fR\|(3),
\&\fIlibnbd\fR\|(3),
\&\fIpoll\fR\|(2),
\&\fIppoll\fR\|(2),
\&\fIpthread_kill\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

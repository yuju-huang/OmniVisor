.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_create 3"
.TH nbd_create 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_create, nbd_close, nbd_get_error, nbd_get_errno \- create libnbd
handles and fetch errors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& struct nbd_handle *nbd;
\&
\& struct nbd_handle *nbd_create (void);
\& void nbd_close (struct nbd_handle *nbd);
\& const char *nbd_get_error (void);
\& int nbd_get_errno (void);
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\& #include <libnbd.h>
\&
\& main ()
\& { 
\&   struct nbd_handle *nbd;
\& 
\&   nbd = nbd_create ();
\&   if (nbd == NULL) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     nbd_close (nbd);
\&     exit (EXIT_FAILURE);
\&   }
\&   nbd_close (nbd);
\&   exit (EXIT_SUCCESS);
\& }
\&
\& cc prog.c \-o prog \-lnbd
\&or:
\& cc prog.c \-o prog \`pkg\-config libnbd \-\-cflags \-\-libs\`
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Create and close handles"
.IX Subsection "Create and close handles"
\&\fBstruct nbd_handle\fR is an opaque structure which describes an \s-1NBD\s0
client handle and the connection to an \s-1NBD\s0 server.
.PP
\&\fBnbd_create\fR creates a new handle.  It returns a pointer to the
opaque handle structure.
.PP
On error this returns \f(CW\*(C`NULL\*(C'\fR.  See \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3)
for how to get further details of the error.
.PP
\&\fBnbd_close\fR closes the handle and frees any associated resources.
The final status of any command that has not been retired (whether by
\&\fInbd_aio_command_completed\fR\|(3) or by a low-level completion callback
returning \f(CW1\fR) is lost.  This function is not safe to call while any
other thread is still using any \f(CW\*(C`nbd_*\*(C'\fR \s-1API\s0 on the same handle.  This
function can block in the case where we wait for a subprocess (eg. one
created with \fInbd_connect_command\fR\|(3)).
.SS "Getting the latest error message in the thread"
.IX Subsection "Getting the latest error message in the thread"
See \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3) for more discussion of how
error handling works in libnbd.
.PP
\&\fBnbd_get_error\fR returns the most recent error message in the current
thread.  The error message is only valid if called immediately after
the failing call, from the same thread.  The error string returned
will be freed up next time any libnbd \s-1API\s0 is called from the same
thread, so if you need to keep it you must make a copy.
.PP
This should never return \f(CW\*(C`NULL\*(C'\fR provided there was an error
returned from the immediately preceding libnbd call in the
current thread.
.PP
\&\fBnbd_get_errno\fR returns the most recent \f(CW\*(C`errno\*(C'\fR in the current
thread.  Not all errors have corresponding errnos, so even if there
has been an error this may return \f(CW0\fR.  Error codes are the standard
ones from \f(CW\*(C`<errno.h>\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

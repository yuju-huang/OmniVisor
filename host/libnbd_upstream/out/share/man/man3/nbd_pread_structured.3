.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_pread_structured 3"
.TH nbd_pread_structured 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_pread_structured \- read from the NBD server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& typedef struct {
\&   int (*callback) (void *user_data, const void *subbuf,
\&                    size_t count, uint64_t offset,
\&                    unsigned status, int *error);
\&   void *user_data;
\&   void (*free) (void *user_data);
\& } nbd_chunk_callback;
\&
\& int nbd_pread_structured (struct nbd_handle *h, void *buf,
\&                           size_t count, uint64_t offset,
\&                           nbd_chunk_callback chunk_callback,
\&                           uint32_t flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Issue a read command to the \s-1NBD\s0 server for the range starting
at \f(CW\*(C`offset\*(C'\fR and ending at \f(CW\*(C`offset\*(C'\fR + \f(CW\*(C`count\*(C'\fR \- 1.  The server's
response may be subdivided into chunks which may arrive out of order
before reassembly into the original buffer; the \f(CW\*(C`chunk\*(C'\fR callback
is used for notification after each chunk arrives, and may perform
additional sanity checking on the server's reply. The callback cannot
call \f(CW\*(C`nbd_*\*(C'\fR APIs on the same handle since it holds the handle lock
and will cause a deadlock.  If the callback returns \f(CW\*(C`\-1\*(C'\fR, and no
earlier error has been detected, then the overall read command will
fail with any non-zero value stored into the callback's \f(CW\*(C`error\*(C'\fR
parameter (with a default of \f(CW\*(C`EPROTO\*(C'\fR); but any further chunks will
still invoke the callback.
.PP
The \f(CW\*(C`chunk\*(C'\fR function is called once per chunk of data received, with
the \f(CW\*(C`user_data\*(C'\fR passed to this function.  The
\&\f(CW\*(C`subbuf\*(C'\fR and \f(CW\*(C`count\*(C'\fR parameters represent the subset of the original
buffer which has just been populated by results from the server (in C,
\&\f(CW\*(C`subbuf\*(C'\fR always points within the original \f(CW\*(C`buf\*(C'\fR; but this guarantee
may not extend to other language bindings). The \f(CW\*(C`offset\*(C'\fR parameter
represents the absolute offset at which \f(CW\*(C`subbuf\*(C'\fR begins within the
image (note that this is not the relative offset of \f(CW\*(C`subbuf\*(C'\fR within
the original buffer \f(CW\*(C`buf\*(C'\fR). Changes to \f(CW\*(C`error\*(C'\fR on output are ignored
unless the callback fails. The input meaning of the \f(CW\*(C`error\*(C'\fR parameter
is controlled by the \f(CW\*(C`status\*(C'\fR parameter, which is one of
.ie n .IP """LIBNBD_READ_DATA"" = 1" 4
.el .IP "\f(CWLIBNBD_READ_DATA\fR = 1" 4
.IX Item "LIBNBD_READ_DATA = 1"
\&\f(CW\*(C`subbuf\*(C'\fR was populated with \f(CW\*(C`count\*(C'\fR bytes of data. On input, \f(CW\*(C`error\*(C'\fR
contains the errno value of any earlier detected error, or zero.
.ie n .IP """LIBNBD_READ_HOLE"" = 2" 4
.el .IP "\f(CWLIBNBD_READ_HOLE\fR = 2" 4
.IX Item "LIBNBD_READ_HOLE = 2"
\&\f(CW\*(C`subbuf\*(C'\fR represents a hole, and contains \f(CW\*(C`count\*(C'\fR \s-1NUL\s0 bytes. On input,
\&\f(CW\*(C`error\*(C'\fR contains the errno value of any earlier detected error, or zero.
.ie n .IP """LIBNBD_READ_ERROR"" = 3" 4
.el .IP "\f(CWLIBNBD_READ_ERROR\fR = 3" 4
.IX Item "LIBNBD_READ_ERROR = 3"
\&\f(CW\*(C`count\*(C'\fR is 0, so \f(CW\*(C`subbuf\*(C'\fR is unusable. On input, \f(CW\*(C`error\*(C'\fR contains the
errno value reported by the server as occurring while reading that
\&\f(CW\*(C`offset\*(C'\fR, regardless if any earlier error has been detected.
.PP
Future \s-1NBD\s0 extensions may permit other values for \f(CW\*(C`status\*(C'\fR, but those
will not be returned to a client that has not opted in to requesting
such extensions. If the server is non-compliant, it is possible for
the \f(CW\*(C`chunk\*(C'\fR function to be called more times than you expect or with
\&\f(CW\*(C`count\*(C'\fR 0 for \f(CW\*(C`LIBNBD_READ_DATA\*(C'\fR or \f(CW\*(C`LIBNBD_READ_HOLE\*(C'\fR. It is also
possible that the \f(CW\*(C`chunk\*(C'\fR function is not called at all (in
particular, \f(CW\*(C`LIBNBD_READ_ERROR\*(C'\fR is used only when an error is
associated with a particular offset, and not when the server reports a
generic error), but you are guaranteed that the callback was called at
least once if the overall read succeeds. Libnbd does not validate that
the server obeyed the requirement that a read call must not have
overlapping chunks and must not succeed without enough chunks to cover
the entire request.
.PP
The \f(CW\*(C`flags\*(C'\fR parameter may be \f(CW0\fR for no flags, or may contain
\&\f(CW\*(C`LIBNBD_CMD_FLAG_DF\*(C'\fR meaning that the server should not reply with
more than one fragment (if that is supported \- some servers cannot do
this, see \fInbd_can_df\fR\|(3)). Libnbd does not validate that the server
actually obeys the flag.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
If the call is successful the function returns \f(CW0\fR.
.SH "ERRORS"
.IX Header "ERRORS"
On error \f(CW\*(C`\-1\*(C'\fR is returned.
.PP
Refer to \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3)
for how to get further details of the error.
.SH "HANDLE STATE"
.IX Header "HANDLE STATE"
The handle must be
connected and finished handshaking with the server,
otherwise this call will return an error.
.SH "VERSION"
.IX Header "VERSION"
This function first appeared in libnbd 1.0.
.PP
If you need to test if this function is available at compile time
check if the following macro is defined:
.PP
.Vb 1
\& #define LIBNBD_HAVE_NBD_PREAD_STRUCTURED 1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbd_aio_pread_structured\fR\|(3),
\&\fInbd_can_df\fR\|(3),
\&\fInbd_create\fR\|(3),
\&\fInbd_pread\fR\|(3),
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

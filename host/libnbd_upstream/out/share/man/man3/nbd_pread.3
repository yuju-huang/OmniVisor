.\" Automatically generated by Podwrapper::Man 1.3.7 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbd_pread 3"
.TH nbd_pread 3 "2020-06-10" "libnbd-1.3.7" "LIBNBD"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbd_pread \- read from the NBD server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <libnbd.h>
\&
\& int nbd_pread (struct nbd_handle *h, void *buf,
\&                size_t count, uint64_t offset,
\&                uint32_t flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Issue a read command to the \s-1NBD\s0 server for the range starting
at \f(CW\*(C`offset\*(C'\fR and ending at \f(CW\*(C`offset\*(C'\fR + \f(CW\*(C`count\*(C'\fR \- 1.  \s-1NBD\s0
can only read all or nothing using this call.  The call
returns when the data has been read fully into \f(CW\*(C`buf\*(C'\fR or there is an
error.  See also \fInbd_pread_structured\fR\|(3), if finer visibility is
required into the server's replies, or if you want to use
\&\f(CW\*(C`LIBNBD_CMD_FLAG_DF\*(C'\fR.
.PP
The \f(CW\*(C`flags\*(C'\fR parameter must be \f(CW0\fR for now (it exists for future \s-1NBD\s0
protocol extensions).
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
If the call is successful the function returns \f(CW0\fR.
.SH "ERRORS"
.IX Header "ERRORS"
On error \f(CW\*(C`\-1\*(C'\fR is returned.
.PP
Refer to \*(L"\s-1ERROR HANDLING\*(R"\s0 in \fIlibnbd\fR\|(3)
for how to get further details of the error.
.SH "HANDLE STATE"
.IX Header "HANDLE STATE"
The handle must be
connected and finished handshaking with the server,
otherwise this call will return an error.
.SH "VERSION"
.IX Header "VERSION"
This function first appeared in libnbd 1.0.
.PP
If you need to test if this function is available at compile time
check if the following macro is defined:
.PP
.Vb 1
\& #define LIBNBD_HAVE_NBD_PREAD 1
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example is also available as \fIexamples/fetch\-first\-sector.c\fR
in the libnbd source code.
.PP
.Vb 10
\& /* This example shows how to connect to an NBD server
\&  * and fetch and print the first sector (usually the
\&  * boot sector or partition table or filesystem
\&  * superblock).
\&  *
\&  * You can test it with nbdkit like this:
\&  *
\&  * nbdkit \-U \- floppy . \e
\&  *   \-\-run \*(Aq./fetch\-first\-sector $unixsocket\*(Aq
\&  *
\&  * The nbdkit floppy plugin creates an MBR disk so the
\&  * first sector is the partition table.
\&  */
\& 
\& #include <stdio.h>
\& #include <stdlib.h>
\& 
\& #include <libnbd.h>
\& 
\& int
\& main (int argc, char *argv[])
\& {
\&   struct nbd_handle *nbd;
\&   char buf[512];
\&   FILE *pp;
\& 
\&   if (argc != 2) {
\&     fprintf (stderr, "%s socket\en", argv[0]);
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Create the libnbd handle. */
\&   nbd = nbd_create ();
\&   if (nbd == NULL) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Connect to the NBD server over a
\&    * Unix domain socket.
\&    */
\&   if (nbd_connect_unix (nbd, argv[1]) == \-1) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Read the first sector synchronously. */
\&   if (nbd_pread (nbd, buf, sizeof buf, 0, 0) == \-1) {
\&     fprintf (stderr, "%s\en", nbd_get_error ());
\&     exit (EXIT_FAILURE);
\&   }
\& 
\&   /* Close the libnbd handle. */
\&   nbd_close (nbd);
\& 
\&   /* Print the first sector. */
\&   pp = popen ("hexdump \-C", "w");
\&   if (pp == NULL) {
\&     perror ("popen: hexdump");
\&     exit (EXIT_FAILURE);
\&   }
\&   fwrite (buf, sizeof buf, 1, pp);
\&   pclose (pp);
\& 
\&   exit (EXIT_SUCCESS);
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbd_aio_pread\fR\|(3),
\&\fInbd_create\fR\|(3),
\&\fInbd_pread_structured\fR\|(3),
\&\fIlibnbd\fR\|(3).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA\s0

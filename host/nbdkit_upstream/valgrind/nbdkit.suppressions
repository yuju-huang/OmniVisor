# nbdkit valgrind suppressions
# Copyright (C) 2016-2020 Red Hat Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# * Neither the name of Red Hat nor the names of its contributors may be
# used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS ''AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# This is a fairly unavoidable leak which happens when we fork
# into the background.  The foreground process exits, but does
# not free the malloc'd list of sockets.
{
  nbdkit_1
  Memcheck:Leak
  fun:malloc
  fun:bind_unix_socket
}

# Accepting a connection starts a thread (which allocates a thread
# stack).  However if we get a signal then there's no way to cleanly
# exit all threads in progress, so the stack leaks.
{
  nbdkit_2
  Memcheck:Leak
  ...
  fun:allocate_stack
}

# close methods are not guaranteed to be called if a connection is in
# progress when the server is being shut down, so leaks in various
# *_open functions are fairly inevitable.  We simply have to check by
# hand that the following leaks are not possible under normal
# circumstances, and then add them to this list.
{
  nbdkit_3
  Memcheck:Leak
  fun:malloc
  fun:error_open
  fun:filter_open
}

{
  nbdkit_4
  Memcheck:Leak
  fun:malloc
  fun:file_open
  fun:plugin_open
}

{
  nbdkit_5
  Memcheck:Leak
  fun:malloc
  fun:memory_open
  fun:plugin_open
}

{
  nbdkit_6
  Memcheck:Leak
  fun:malloc
  fun:null_open
  fun:plugin_open
}

{
  nbdkit_7
  Memcheck:Leak
  fun:malloc
  fun:partition_open
  fun:filter_open
}

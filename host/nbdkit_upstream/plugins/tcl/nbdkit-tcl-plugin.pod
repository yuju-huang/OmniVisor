=head1 NAME

nbdkit-tcl-plugin - nbdkit Tcl plugin

=head1 SYNOPSIS

 nbdkit tcl /path/to/plugin.tcl [arguments...]

=head1 DESCRIPTION

C<nbdkit-tcl-plugin> is an embedded Tcl interpreter for
L<nbdkit(1)>, allowing you to write nbdkit plugins in Tcl.

=head2 If you have been given an nbdkit Tcl plugin

Assuming you have a Tcl script which is an nbdkit plugin, you run it
like this:

 nbdkit tcl /path/to/plugin.tcl

You may have to add further C<key=value> arguments to the command
line.  Read the Tcl script to see if it requires any.

=head1 WRITING A TCL NBDKIT PLUGIN

For an example plugin written in Tcl, see:
L<https://github.com/libguestfs/nbdkit/blob/master/plugins/tcl/example.tcl>

Broadly speaking, Tcl nbdkit plugins work like C ones, so you should
read L<nbdkit-plugin(3)> first.

To write a Tcl nbdkit plugin, you create a Tcl file which contains
at least the following required subroutines:

 proc plugin_open {readonly} {
     # see below
     return $h
 }
 proc get_size {h} {
     # see below
     return $size
 }
 proc pread {h count offset} {
     # see below
     return $buf
 }

Note that the subroutines must have those literal names (like
C<plugin_open>), because the C part looks up and calls those functions
directly.  You may want to include documentation and globals (eg. for
storing global state).  Also any top-level statements are run when
nbdkit starts up.

=head2 Executable script

If you want you can make the script executable and include a "shebang"
at the top:

 #!/usr/sbin/nbdkit tcl

See also L<nbdkit(1)/Shebang scripts>.

These scripts can also be installed in the C<$plugindir>.  See
L<nbdkit-plugin(3)/WRITING PLUGINS IN OTHER PROGRAMMING LANGUAGES>.

=head2 Exceptions

Tcl plugin methods can indicate an error by calling C<error>.

=head2 Binary data

When writing your Tcl script, be careful to ensure that it is
processing binary data (not Unicode).  If reading and writing from
local disk files, you should use:

 fconfigure $fp -translation binary

Note also that the value returned from C<pread> should convertible to
a byte array, and the buffer passed to C<pwrite> is also a byte array.

See also: L<https://wiki.tcl.tk/1180>

=head2 Tcl callbacks

This just documents the arguments to the callbacks in Tcl, and any
way that they differ from the C callbacks.  In all other respects they
work the same way as the C callbacks, so you should go and read
L<nbdkit-plugin(3)>.

=over 4

=item C<dump_plugin>

(Optional)

There are no arguments or return value.

=item C<config>

(Optional)

 proc config {key value} {
     # No return value.
 }

=item C<config_complete>

(Optional)

There are no arguments or return value.

=item C<plugin_open>

(Required)

 proc plugin_open {readonly} {
     set handle ...
     return $handle
 }

The C<readonly> flag is a boolean.

You can return any Tcl string or object as the handle.  It is passed
back to subsequent calls.

=item C<plugin_close>

(Optional)

 proc plugin_close {h} {
     # No return value
 }

After C<plugin_close> returns, the reference count of the handle is
decremented in the C part, which usually means that the handle and its
contents will be garbage collected.

=item C<get_size>

(Required)

 proc get_size {h} {
     set size .. the size of the disk ..
     return $size
 }

This returns the size of the disk.

=item C<can_write>

(Optional)

 proc can_write {h} {
     return $bool
 }

Return a boolean indicating whether the disk is writable.

=item C<can_flush>

(Optional)

 proc can_flush {h} {
     return $bool
 }

Return a boolean indicating whether flush can be performed.

=item C<is_rotational>

(Optional)

 proc is_rotational {h} {
     return $bool
 }

Return a boolean indicating whether the disk is rotational.

=item C<can_trim>

(Optional)

 proc can_trim {h} {
     return $bool
 }

Return a boolean indicating whether trim/discard can be performed.

=item C<pread>

(Required)

 proc pread {h count offset} {
    # Construct a buffer of length $count bytes and return it.
    return $buf
 }

The body of your C<pread> function should construct a buffer of length
(at least) C<$count> bytes.  You should read C<$count> bytes from the
disk starting at C<$offset>.

NBD only supports whole reads, so your function should try to read the
whole region (perhaps requiring a loop).  If the read fails or is
partial, your function should call C<error>.

=item C<pwrite>

(Optional)

 proc pwrite {h buf offset} {
    # No return value
 }

The body of your C<pwrite> function should write the C<$buf> string to
the disk.  You should write C<$count> bytes to the disk starting at
C<$offset>.

NBD only supports whole writes, so your function should try to write
the whole region (perhaps requiring a loop).  If the write fails or is
partial, your function should call C<error>.

=item C<plugin_flush>

(Optional)

 proc plugin_flush {h} {
     # No return value
 }

The body of your C<plugin_flush> function should do a L<sync(2)> or
L<fdatasync(2)> or equivalent on the backing store.

=item C<trim>

(Optional)

 proc trim {h count offset} {
     # No return value
 }

The body of your C<trim> function should "punch a hole" in the backing
store.

=item C<zero>

(Optional)

 proc zero {h count offset may_trim} {
    # No return value
 }

The body of your C<zero> function should ensure that C<$count> bytes
of the disk, starting at C<$offset>, will read back as zero.  If
C<$may_trim> is true, the operation may be optimized as a trim as long
as subsequent reads see zeroes.

NBD only supports whole writes, so your function should try to write
the whole region (perhaps requiring a loop).  If the write fails or is
partial, your function should call C<error>.

=back

=head2 Missing callbacks

=over 4

=item Missing: C<load>, C<unload>, C<name>, C<version>, C<longname>,
C<description>, C<config_help>, C<can_zero>, C<can_fua>, C<can_cache>,
C<cache>

These are not yet supported.

=back

=head2 Threads

The thread model for Tcl callbacks currently cannot be set from Tcl.
It is hard-coded in the C part to
C<NBDKIT_THREAD_MODEL_SERIALIZE_ALL_REQUESTS>.  This may change or be
settable in future.

=head1 FILES

=over 4

=item F<$plugindir/nbdkit-tcl-plugin.so>

The plugin.

Use C<nbdkit --dump-config> to find the location of C<$plugindir>.

=back

=head1 VERSION

C<nbdkit-tcl-plugin> first appeared in nbdkit 1.4.

=head1 SEE ALSO

L<nbdkit(1)>,
L<nbdkit-plugin(3)>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2018 Red Hat Inc.

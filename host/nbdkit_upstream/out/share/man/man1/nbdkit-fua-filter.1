.\" Automatically generated by Podwrapper::Man 1.21.8 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdkit-fua-filter 1"
.TH nbdkit-fua-filter 1 "2020-06-10" "nbdkit-1.21.8" "NBDKIT"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdkit\-fua\-filter \- modify nbdkit flush and Forced Unit Access (FUA)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& nbdkit \-\-filter=fua plugin [fuamode=MODE] [plugin\-args...]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`nbdkit\-fua\-filter\*(C'\fR is a filter that intentionally modifies handling
of the “Forced Unit Access” (\s-1FUA\s0) flag across the \s-1NBD\s0 protocol.
.PP
This filter can be used to disable \s-1FUA\s0 and flush requests for speed
(although this is unsafe).  Also it can be used to test client or
server fallbacks, and for evaluating timing differences between proper
use of \s-1FUA\s0 compared to a full flush.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The \f(CW\*(C`fuamode\*(C'\fR parameter is optional and controls which mode the
filter will use.
.IP "\fBfuamode=discard\fR" 4
.IX Item "fuamode=discard"
(nbdkit ≥ 1.22)
.Sp
The filter will discard \s-1FUA\s0 and flush requests.
.Sp
\&\fBThis mode is unsafe\fR: If the \s-1NBD\s0 disk contains a filesystem then you
will likely lose data in the event of a crash.  It should only be used
for ephemeral data which you can easily recreate, such as caches,
builds, test data, etc.
.IP "\fBfuamode=pass\fR" 4
.IX Item "fuamode=pass"
(nbdkit ≥ 1.22)
.Sp
Pass through \s-1FUA\s0 and flush requests unchanged.  Turns the filter into
a no-op.
.IP "\fBfuamode=none\fR" 4
.IX Item "fuamode=none"
\&\s-1FUA\s0 support is not advertised to the client.  Clients will not be able
to issue \s-1FUA\s0 write requests, but can send flush commands if the plugin
supports it.
.Sp
This is the default if the \f(CW\*(C`fuamode\*(C'\fR parameter is not specified.
.IP "\fBfuamode=emulate\fR" 4
.IX Item "fuamode=emulate"
The filter will emulate \s-1FUA\s0 support using the plugin’s \f(CW\*(C`.flush\*(C'\fR
callback, regardless of whether the plugin itself supports more
efficient \s-1FUA.\s0  It refuses to load if the plugin does not support
flush.
.IP "\fBfuamode=native\fR" 4
.IX Item "fuamode=native"
The filter will advertise native \s-1FUA\s0 support to the client and earlier
filters in the chain.  This is useful for comparing optimizations of
\&\s-1FUA\s0 handling when splitting large requests into sub-requests.  It
refuses to load if the plugin’s \f(CW\*(C`.can_fua\*(C'\fR callback returns
\&\f(CW\*(C`NBDKIT_FUA_NONE\*(C'\fR.
.IP "\fBfuamode=force\fR" 4
.IX Item "fuamode=force"
The filter will request \s-1FUA\s0 on all write transactions, even when the
client did not request it (“write\-through” mode).  In turn client
flush requests become no-ops.  It refuses to load if the plugin’s
\&\f(CW\*(C`.can_fua\*(C'\fR callback returns \f(CW\*(C`NBDKIT_FUA_NONE\*(C'\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "\(bu" 4
Serve the file \fIdisk.img\fR discarding all \s-1FUA\s0 and flush requests.
This can greatly improve performance, but you will likely lose data if
there is a crash, so it is not safe.
.Sp
.Vb 1
\& nbdkit \-\-filter=discard file disk.img fuamode=discard
.Ve
.IP "\(bu" 4
Serve the file \fIdisk.img\fR, but force the client to submit explicit
flush requests instead of using \f(CW\*(C`NBD_CMD_FLAG_FUA\*(C'\fR:
.Sp
.Vb 1
\& nbdkit \-\-filter=fua file disk.img
.Ve
.IP "\(bu" 4
Observe that the blocksize filter optimizes its handling of the \s-1FUA\s0
flag based on whether it knows nbdkit will be emulating \s-1FUA\s0 with a
flush, by comparing the log filter output on top of different fua
filter modes:
.Sp
.Vb 4
\& nbdkit \-\-filter=blocksize \-\-filter=log \-\-filter=fua file disk.img \e
\&   maxlen=4k logfile=fua_emulated fuamode=emulate
\& nbdkit \-\-filter=blocksize \-\-filter=log \-\-filter=fua file disk.img \e
\&   maxlen=4k logfile=fua_native fuamode=native
.Ve
.IP "\(bu" 4
Serve the file \fIdisk.img\fR in write-through mode, where all writes
from the client are immediately flushed to disk as if the client had
always requested \s-1FUA:\s0
.Sp
.Vb 1
\& nbdkit \-\-filter=fua file disk.img fuamode=force
.Ve
.SH "FILES"
.IX Header "FILES"
.IP "\fI\f(CI$filterdir\fI/nbdkit\-fua\-filter.so\fR" 4
.IX Item "$filterdir/nbdkit-fua-filter.so"
The filter.
.Sp
Use \f(CW\*(C`nbdkit \-\-dump\-config\*(C'\fR to find the location of \f(CW$filterdir\fR.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW\*(C`nbdkit\-fua\-filter\*(C'\fR first appeared in nbdkit 1.2.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbdkit\fR\|(1),
\&\fInbdkit\-file\-plugin\fR\|(1),
\&\fInbdkit\-filter\fR\|(3),
\&\fInbdkit\-blocksize\-filter\fR\|(1),
\&\fInbdkit\-log\-filter\fR\|(1),
\&\fInbdkit\-nocache\-filter\fR\|(1),
\&\fInbdkit\-noextents\-filter\fR\|(1),
\&\fInbdkit\-noparallel\-filter\fR\|(1),
\&\fInbdkit\-nozero\-filter\fR\|(1).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2018 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS\s0 ''\s-1AS IS\s0'' \s-1AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF
USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0

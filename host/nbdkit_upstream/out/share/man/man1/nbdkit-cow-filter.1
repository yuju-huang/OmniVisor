.\" Automatically generated by Podwrapper::Man 1.21.8 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdkit-cow-filter 1"
.TH nbdkit-cow-filter 1 "2020-06-10" "nbdkit-1.21.8" "NBDKIT"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdkit\-cow\-filter \- nbdkit copy\-on\-write (COW) filter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& nbdkit \-\-filter=cow plugin [plugin\-args...]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`nbdkit\-cow\-filter\*(C'\fR is a filter that makes a temporary writable copy
on top of a read-only plugin.  It can be used to enable writes for
plugins which only implement read-only access.  Note that:
.IP "\(bu" 4
\&\fBAnything written is thrown away as soon as nbdkit exits.\fR
.IP "\(bu" 4
All connections to the nbdkit instance see the same view of the disk.
.Sp
This is different from \fInbd\-server\fR\|(1) where each connection sees its
own copy-on-write overlay and simply disconnecting the client throws
that away.  It also allows us to create diffs, see below.
.IP "\(bu" 4
The plugin is opened read-only (as if the \fI\-r\fR flag was passed), but
you should \fBnot\fR pass the \fI\-r\fR flag to nbdkit.
.IP "\(bu" 4
Note that the use of this filter rounds the image size down to a
multiple of the caching granularity (4096), to ease the
implementation. If you need to round the image size up instead to
access the last few bytes, combine this filter with
\&\fInbdkit\-truncate\-filter\fR\|(1).
.PP
Limitations of the filter include:
.IP "\(bu" 4
The underlying file/device must not be resized.
.IP "\(bu" 4
The underlying plugin must behave “normally”, meaning that it must
serve the same data to each client.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "\fBcow\-on\-cache=true\fR" 4
.IX Item "cow-on-cache=true"
Treat a client cache request as a shortcut for copying unmodified data
from the plugin to the overlay, rather than the default of passing
cache requests on to the plugin. This parameter defaults to false
(which leaves the overlay as small as possible), but setting it can be
useful for converting cache commands into a form of copy-on-read
behavior, in addition to the filter's normal copy-on-write semantics.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Serve the file \fIdisk.img\fR, allowing writes, but do not save any
changes into the file:
.PP
.Vb 1
\& nbdkit \-\-filter=cow file disk.img
.Ve
.PP
\&\fInbdkit\-xz\-plugin\fR\|(1) only supports read access, but you can provide
temporary write access by doing (although this does \fBnot\fR save
changes to the file):
.PP
.Vb 1
\& nbdkit \-\-filter=cow xz disk.xz
.Ve
.SH "CREATING A DIFF WITH QEMU-IMG"
.IX Header "CREATING A DIFF WITH QEMU-IMG"
Although nbdkit-cow-filter itself cannot save the differences, it is
possible to do this using an obscure feature of \fIqemu\-img\fR\|(1).
\&\fBnbdkit must remain continuously running during the whole operation,
otherwise all changes will be lost\fR.
.PP
Run nbdkit:
.PP
.Vb 1
\& nbdkit \-\-filter=cow file disk.img
.Ve
.PP
and then connect with a client and make whatever changes you need.
At the end, disconnect the client.
.PP
Run these \f(CW\*(C`qemu\-img\*(C'\fR commands to construct a qcow2 file containing
the differences:
.PP
.Vb 2
\& qemu\-img create \-f qcow2 \-b nbd:localhost diff.qcow2
\& qemu\-img rebase \-b disk.img diff.qcow2
.Ve
.PP
\&\fIdiff.qcow2\fR now contains the differences between the base
(\fIdisk.img\fR) and the changes stored in nbdkit-cow-filter.  \f(CW\*(C`nbdkit\*(C'\fR
can now be killed.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.ie n .IP """TMPDIR""" 4
.el .IP "\f(CWTMPDIR\fR" 4
.IX Item "TMPDIR"
The copy-on-write changes are stored in a temporary file located in
\&\fI/var/tmp\fR by default.  You can override this location by setting the
\&\f(CW\*(C`TMPDIR\*(C'\fR environment variable before starting nbdkit.
.SH "FILES"
.IX Header "FILES"
.IP "\fI\f(CI$filterdir\fI/nbdkit\-cow\-filter.so\fR" 4
.IX Item "$filterdir/nbdkit-cow-filter.so"
The filter.
.Sp
Use \f(CW\*(C`nbdkit \-\-dump\-config\*(C'\fR to find the location of \f(CW$filterdir\fR.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW\*(C`nbdkit\-cow\-filter\*(C'\fR first appeared in nbdkit 1.2.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbdkit\fR\|(1),
\&\fInbdkit\-file\-plugin\fR\|(1),
\&\fInbdkit\-xz\-plugin\fR\|(1),
\&\fInbdkit\-truncate\-filter\fR\|(1),
\&\fInbdkit\-filter\fR\|(3),
\&\fIqemu\-img\fR\|(1).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2018 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS\s0 ''\s-1AS IS\s0'' \s-1AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF
USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0

.\" Automatically generated by Podwrapper::Man 1.21.8 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdkit-loop 1"
.TH nbdkit-loop 1 "2020-06-10" "nbdkit-1.21.8" "NBDKIT"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdkit\-loop \- use nbdkit with the Linux kernel client to create loop
devices and loop mounts
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
nbdkit (server) can be used with the Linux kernel nbd (client) in a
loop mode allowing any of the plugins supported by nbdkit to be turned
into Linux block devices.
.PP
In addition to \fInbdkit\fR\|(1) itself, the main commands you will use
are:
.IP "nbd-client \-b 512 localhost /dev/nbd0" 4
.IX Item "nbd-client -b 512 localhost /dev/nbd0"
Attaches a locally running nbdkit instance to the kernel device
\&\fI/dev/nbd0\fR.  \fI\-b 512\fR can be omitted when using \fInbd\-client\fR\|(8) ≥ 3.19.
.IP "nbd-client \-b 512 \-unix /tmp/socket /dev/nbd0" 4
.IX Item "nbd-client -b 512 -unix /tmp/socket /dev/nbd0"
Alternative method using a Unix domain socket instead of a public
\&\s-1TCP/IP\s0 socket.  Use \f(CW\*(C`nbdkit \-U /tmp/socket\*(C'\fR to serve.
.IP "nbd-client \-d /dev/nbd0" 4
.IX Item "nbd-client -d /dev/nbd0"
Detaches \fI/dev/nbd0\fR.
.IP "nbd-client \-c /dev/nbd0" 4
.IX Item "nbd-client -c /dev/nbd0"
Queries whether \fI/dev/nbd0\fR is attached or not.
.IP "modprobe nbd" 4
.IX Item "modprobe nbd"
You may be need to run this command once to load the nbd client kernel
module.
.PP
The \fInbd\-client\fR\|(8) and \fImodprobe\fR\|(8) commands must be run as root.
.SS "Warning: Do not loop mount untrusted filesystems"
.IX Subsection "Warning: Do not loop mount untrusted filesystems"
Untrusted filesystems and untrusted disk images should not be loop
mounted because they could contain exploits that attack your host
kernel.  Use the tools from \fIlibguestfs\fR\|(3) instead since it safely
isolates untrusted filesystems from the host.
.SS "Loop mount a filesystem from a compressed file"
.IX Subsection "Loop mount a filesystem from a compressed file"
If you have a filesystem or disk image in xz-compressed format then
you can use \fInbdkit\-xz\-filter\fR\|(1) and \fInbdkit\-file\-plugin\fR\|(1) to
loop mount it as follows:
.PP
.Vb 3
\& nbdkit \-\-filter=xz file disk.xz
\& nbd\-client \-b 512 localhost /dev/nbd0
\& mount /dev/nbd0p1 /mnt
.Ve
.SS "Loop mount a filesystem from a web server"
.IX Subsection "Loop mount a filesystem from a web server"
You can use \fInbdkit\-curl\-plugin\fR\|(1) to loop mount a filesystem from a
disk image on a web server:
.PP
.Vb 3
\& nbdkit [\-\-filter=xz] curl https://example.com/disk.img
\& nbd\-client \-b 512 localhost /dev/nbd0
\& mount /dev/nbd0p1 /mnt
.Ve
.PP
Use \fI\-\-filter=xz\fR if the remote image is XZ-compressed.
.SS "Create a giant btrfs filesystem"
.IX Subsection "Create a giant btrfs filesystem"
nbdkit is useful for testing the limits of Linux filesystems.  Using
\&\fInbdkit\-memory\-plugin\fR\|(1) you can create virtual disks stored in \s-1RAM\s0
with a virtual size up to 2⁶³\-1 bytes, and then create filesystems
on these:
.PP
.Vb 2
\& nbdkit memory $(( 2**63 \- 1 ))
\& nbd\-client \-b 512 localhost /dev/nbd0
.Ve
.PP
Partition the device using \s-1GPT,\s0 creating a single partition with all
default settings:
.PP
.Vb 1
\& gdisk /dev/nbd0
.Ve
.PP
Make a btrfs filesystem on the disk and mount it:
.PP
.Vb 2
\& mkfs.btrfs \-K /dev/nbd0p1
\& mount /dev/nbd0p1 /mnt
.Ve
.SS "Inject errors into Linux devices"
.IX Subsection "Inject errors into Linux devices"
Using \fInbdkit\-error\-filter\fR\|(1) you can see how Linux devices react to
errors:
.PP
.Vb 6
\& nbdkit \-\-filter=error \e
\&        memory 64M \e
\&        error\-rate=100% error\-file=/tmp/inject
\& nbd\-client \-b 512 localhost /dev/nbd0
\& mkfs \-t ext4 /dev/nbd0
\& mount /dev/nbd0 /mnt
.Ve
.PP
Inject errors by touching \fI/tmp/inject\fR, and stop injecting errors by
removing this file.
.SS "Write Linux block devices in shell script"
.IX Subsection "Write Linux block devices in shell script"
Using \fInbdkit\-sh\-plugin\fR\|(3) you can write custom Linux block devices
in shell script for testing.  For example the following shell script
creates a disk which contains a bad sector:
.PP
.Vb 10
\& #!/bin/bash \-
\& case "$1" in
\&     thread_model) echo parallel ;;
\&     get_size) echo 64M ;;
\&     pread)
\&         if [ $4 \-le 100000 ] && [ $(( $4+$3 )) \-gt 100000 ]; then
\&             echo EIO Bad block >&2
\&             exit 1
\&         else
\&             dd if=/dev/zero count=$3 iflag=count_bytes
\&         fi ;;
\&     *) exit 2 ;;
\& esac
.Ve
.PP
Create a loop from this shell script using:
.PP
.Vb 2
\& nbdkit sh ./bad\-sector.sh
\& nbd\-client \-b 512 localhost /dev/nbd0
.Ve
.PP
You can then try running tests such as:
.PP
.Vb 1
\& badblocks /dev/nbd0
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbdkit\fR\|(1),
\&\fInbdkit\-plugin\fR\|(3),
\&\fIloop\fR\|(4),
\&\fIlosetup\fR\|(8),
\&\fImount\fR\|(8),
\&\fInbdfuse\fR\|(1),
\&\fInbd\-client\fR\|(8),
\&\fImodprobe\fR\|(8),
\&\fIlibguestfs\fR\|(3), http://libguestfs.org.
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2013\-2020 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS\s0 ''\s-1AS IS\s0'' \s-1AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF
USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0

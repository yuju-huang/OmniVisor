.\" Automatically generated by Podwrapper::Man 1.21.8 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdkit-vddk-plugin 1"
.TH nbdkit-vddk-plugin 1 "2020-06-10" "nbdkit-1.21.8" "NBDKIT"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdkit\-vddk\-plugin \- nbdkit VMware VDDK plugin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& nbdkit vddk [file=]FILENAME
\&             [config=FILENAME] [cookie=COOKIE] [libdir=LIBRARY]
\&             [nfchostport=PORT] [single\-link=true]
\&             [password=PASSWORD | password=\- | password=+FILENAME
\&             | password=\-FD]
\&             [port=PORT] [server=HOSTNAME] [snapshot=MOREF]
\&             [thumbprint=THUMBPRINT] [transports=MODE:MODE:...]
\&             [unbuffered=true] [user=USERNAME] [vm=moref=ID]
\& nbdkit vddk \-\-dump\-plugin
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`nbdkit\-vddk\-plugin\*(C'\fR is an \fInbdkit\fR\|(1) plugin that serves files from
local VMware \s-1VMDK\s0 files, VMware ESXi servers, VMware VCenter servers,
and other sources.  It requires VMware's proprietary \s-1VDDK\s0 library that
you must download yourself separately.
.PP
The plugin can serve read-only (if the \fI\-r\fR option is used) or
read/write.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Open a local \s-1VMDK\s0 file"
.IX Subsection "Open a local VMDK file"
.Vb 1
\& nbdkit vddk file=/absolute/path/to/file.vmdk
.Ve
.PP
Note that when opening local files the \f(CW\*(C`file=\*(C'\fR parameter \fBmust\fR be
an absolute path.
.PP
Because \s-1VDDK\s0 needs to take a lock on this file, the file must be on a
writable filesystem (unless you use the \fI\-r\fR option).
.SS "Open a file on a remote VMware ESXi hypervisor"
.IX Subsection "Open a file on a remote VMware ESXi hypervisor"
Connect directly to a VMware ESXi hypervisor and export a particular
file:
.PP
.Vb 4
\& nbdkit vddk user=root password=+/tmp/rootpw \e
\&             server=esxi.example.com thumbprint=xx:xx:xx:... \e
\&             vm=moref=2 \e
\&             file="[datastore1] Fedora/Fedora.vmdk"
.Ve
.PP
\&\f(CW\*(C`user\*(C'\fR and \f(CW\*(C`password\*(C'\fR must be specified.  Use \f(CW\*(C`password=+FILENAME\*(C'\fR
to provide the password securely in a file.
.PP
\&\f(CW\*(C`server\*(C'\fR is the hostname of the ESXi server.
.PP
\&\f(CW\*(C`thumbprint\*(C'\fR is the thumb print for validating the \s-1SSL\s0 certificate.
How to find the thumb print of a server is described in
\&\*(L"\s-1THUMBPRINTS\*(R"\s0 below.
.PP
\&\f(CW\*(C`vm\*(C'\fR is the Managed Object Reference (\*(L"moref\*(R") of the virtual
machine.  See \*(L"\s-1MANAGED OBJECT REFERENCE\*(R"\s0 below.
.PP
\&\f(CW\*(C`file\*(C'\fR is the file you want to open, usually in the form
\&\f(CW"[datastore] vmname/vmname.vmdk"\fR.  See \*(L"\s-1FILE PARAMETER\*(R"\s0 below.
.SS "Open a file on a remote VMware vCenter server"
.IX Subsection "Open a file on a remote VMware vCenter server"
Connect via VMware vCenter and export a particular file:
.PP
.Vb 4
\& nbdkit vddk user=root password=vmware \e
\&             server=vcenter.example.com thumbprint=xx:xx:xx:... \e
\&             vm=moref=vm\-16 \e
\&             file="[datastore1] Fedora/Fedora.vmdk"
.Ve
.PP
\&\f(CW\*(C`user\*(C'\fR and \f(CW\*(C`password\*(C'\fR must be specified.  Use \f(CW\*(C`password=+FILENAME\*(C'\fR
to provide the password securely in a file.
.PP
\&\f(CW\*(C`server\*(C'\fR is the hostname of the vCenter server.
.PP
\&\f(CW\*(C`thumbprint\*(C'\fR is the thumb print for validating the \s-1SSL\s0 certificate.
How to find the thumb print of a server is described in
\&\*(L"\s-1THUMBPRINTS\*(R"\s0 below.
.PP
\&\f(CW\*(C`vm\*(C'\fR is the Managed Object Reference (\*(L"moref\*(R") of the virtual
machine.  See \*(L"\s-1MANAGED OBJECT REFERENCE\*(R"\s0 below.
.PP
\&\f(CW\*(C`file\*(C'\fR is the file you want to open, usually in the form
\&\f(CW"[datastore] vmname/vmname.vmdk"\fR.  See \*(L"\s-1FILE PARAMETER\*(R"\s0 below.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
All parameters are optional except:
.ie n .IP """file""" 4
.el .IP "\f(CWfile\fR" 4
.IX Item "file"
is required for opening a local \s-1VMDK\s0 file.
.ie n .IP """file""" 4
.el .IP "\f(CWfile\fR" 4
.IX Item "file"
.PD 0
.ie n .IP """server""" 4
.el .IP "\f(CWserver\fR" 4
.IX Item "server"
.ie n .IP """thumbprint""" 4
.el .IP "\f(CWthumbprint\fR" 4
.IX Item "thumbprint"
.ie n .IP """user""" 4
.el .IP "\f(CWuser\fR" 4
.IX Item "user"
.ie n .IP """password""" 4
.el .IP "\f(CWpassword\fR" 4
.IX Item "password"
.ie n .IP """vm""" 4
.el .IP "\f(CWvm\fR" 4
.IX Item "vm"
.PD
When making a remote connection you must supply all of these
parameters.
.IP "\fBconfig=\fR\s-1FILENAME\s0" 4
.IX Item "config=FILENAME"
The name of the \s-1VDDK\s0 configuration file.
.IP "\fBcookie=\fR\s-1COOKIE\s0" 4
.IX Item "cookie=COOKIE"
Cookie from existing authenticated session on the host.
.IP "\fBfile=\fR\s-1FILENAME\s0" 4
.IX Item "file=FILENAME"
.PD 0
.IP "\fBfile=[\fRdatastore\fB] \fRvmname/vmname\fB.vmdk\fR" 4
.IX Item "file=[datastore] vmname/vmname.vmdk"
.PD
Set the name of the \s-1VMDK\s0 file to serve.
.Sp
For local files you \fBmust\fR supply an absolute path.
For remote files see \*(L"\s-1FILE PARAMETER\*(R"\s0 section below.
.Sp
If a \s-1VM\s0 has multiple disks, nbdkit can only serve one at a time.  To
serve more than one you must run multiple copies of nbdkit.  (See
\&\*(L"\s-1NOTES\*(R"\s0 below).
.Sp
\&\f(CW\*(C`file=\*(C'\fR is a magic config key and may be omitted in most cases.
See \*(L"Magic parameters\*(R" in \fInbdkit\fR\|(1).
.IP "\fBlibdir=\fR\s-1PATHNAME\s0" 4
.IX Item "libdir=PATHNAME"
This sets the path of the VMware \s-1VDDK\s0 distribution.
.Sp
\&\s-1VDDK\s0 uses this to load its own plugins, if this path is unspecified or
wrong then \s-1VDDK\s0 will work with reduced functionality.
.Sp
If the parameter is not given, then a hard-coded path determined at
compile time is used, see \*(L"DUMP-PLUGIN \s-1OUTPUT\*(R"\s0 below.
.IP "\fBnfchostport=\fR\s-1PORT\s0" 4
.IX Item "nfchostport=PORT"
Port used to establish an \s-1NFC\s0 connection to ESXi.  Defaults to 902.
.IP "\fBpassword=\fR\s-1PASSWORD\s0" 4
.IX Item "password=PASSWORD"
Set the password to use when connecting to the remote server.
.Sp
Note that passing this on the command line is not secure on shared
machines.
.IP "\fBpassword=\-\fR" 4
.IX Item "password=-"
Ask for the password (interactively) when nbdkit starts up.
.IP "\fBpassword=+\fR\s-1FILENAME\s0" 4
.IX Item "password=+FILENAME"
Read the password from the named file.  This is a secure method
to supply a password, as long as you set the permissions on the file
appropriately.
.IP "\fBpassword=\-\fR\s-1FD\s0" 4
.IX Item "password=-FD"
Read the password from file descriptor number \f(CW\*(C`FD\*(C'\fR, inherited from
the parent process when nbdkit starts up.  This is also a secure
method to supply a password.
.IP "\fBport=\fR\s-1PORT\s0" 4
.IX Item "port=PORT"
The port on the VCenter/ESXi host.  Defaults to 443.
.IP "\fBserver=\fR\s-1HOSTNAME\s0" 4
.IX Item "server=HOSTNAME"
The hostname or \s-1IP\s0 address of VCenter or ESXi host.
.IP "\fBsingle\-link=true\fR" 4
.IX Item "single-link=true"
(nbdkit ≥ 1.12)
.Sp
Open the current link, not the entire chain.  This corresponds to the
\&\f(CW\*(C`VIXDISKLIB_FLAG_OPEN_SINGLE_LINK\*(C'\fR flag.
.IP "\fBsnapshot=\fR\s-1MOREF\s0" 4
.IX Item "snapshot=MOREF"
The Managed Object Reference of the snapshot.
See \*(L"\s-1MANAGED OBJECT REFERENCE\*(R"\s0 below.
.IP "\fBthumbprint=\fR\s-1THUMBPRINT\s0" 4
.IX Item "thumbprint=THUMBPRINT"
The \s-1SSL\s0 (\s-1SHA1\s0) thumbprint for validating the \s-1SSL\s0 certificate.
.Sp
The format is
\&\f(CW\*(C`xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx\*(C'\fR
(20 hex digit pairs).
.Sp
See \*(L"\s-1THUMBPRINTS\*(R"\s0 below for how to get this.
.IP "\fBtransports=\fR\s-1MODE\s0\fB:\fR\s-1MODE\s0\fB:\fR..." 4
.IX Item "transports=MODE:MODE:..."
List of one or more transport modes to use.  Possible values include
‘nbd’, ‘nbdssl’, ‘san’, ‘hotadd’, ‘file’ (there may be others).  If
not given, \s-1VDDK\s0 will try to choose the best transport mode.
.IP "\fBunbuffered=true\fR" 4
.IX Item "unbuffered=true"
(nbdkit ≥ 1.12)
.Sp
Disable host caching.  This corresponds to the
\&\f(CW\*(C`VIXDISKLIB_FLAG_OPEN_UNBUFFERED\*(C'\fR flag.
.IP "\fBuser=\fR\s-1USERNAME\s0" 4
.IX Item "user=USERNAME"
The username to connect to the remote server as.
.IP "\fBvm=moref=\fR\s-1ID\s0" 4
.IX Item "vm=moref=ID"
The Managed Object Reference (\*(L"moref\*(R") of the virtual machine.
See \*(L"\s-1MANAGED OBJECT REFERENCE\*(R"\s0 below.
.IP "\fBvimapiver=\fR\s-1APIVER\s0" 4
.IX Item "vimapiver=APIVER"
This parameter is ignored for backwards compatibility.
.SH "LIBRARY AND CONFIG FILE LOCATIONS"
.IX Header "LIBRARY AND CONFIG FILE LOCATIONS"
The \s-1VDDK\s0 library should not be placed on a system library path such as
\&\fI/usr/lib\fR.  The reason for this is that the \s-1VDDK\s0 library is shipped
with recompiled libraries like \fIlibcrypto.so\fR and \fIlibstdc++.so\fR
that can conflict with system libraries.
.PP
You have two choices:
.IP "\(bu" 4
Place \s-1VDDK\s0 in the default libdir which is compiled into this plugin,
for example:
.Sp
.Vb 2
\& $ nbdkit vddk \-\-dump\-plugin | grep ^vddk_default_libdir
\& vddk_default_libdir=/usr/lib64/vmware\-vix\-disklib
.Ve
.IP "\(bu" 4
But the most common way is to set the \f(CW\*(C`libdir\*(C'\fR parameter to point to
\&\fIvmware\-vix\-disklib\-distrib/\fR (which you can unpack anywhere you
like), and this plugin will find the \s-1VDDK\s0 library from there.  For
example:
.Sp
.Vb 3
\& nbdkit vddk \e
\&     libdir=/path/to/vmware\-vix\-disklib\-distrib \e
\&     file=file.vmdk
.Ve
.PP
\&\s-1VDDK\s0 itself looks in a few default locations for the optional
configuration file, usually including \fI/etc/vmware/config\fR and
\&\fI\f(CI$HOME\fI/.vmware/config\fR, but you can override this using the \f(CW\*(C`config\*(C'\fR
parameter.
.ie n .SS "No need to set ""LD_LIBRARY_PATH"""
.el .SS "No need to set \f(CWLD_LIBRARY_PATH\fP"
.IX Subsection "No need to set LD_LIBRARY_PATH"
In nbdkit ≤ 1.16 you had to set the environment variable
\&\f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR when using this plugin.  In nbdkit ≥ 1.18 this
is \fInot\fR recommended.
.SH "FILE PARAMETER"
.IX Header "FILE PARAMETER"
The \f(CW\*(C`file\*(C'\fR parameter can either be a local file, in which case it
must be the absolute path.  Or it can refer to a remote file on the
VMware server in the format \f(CW"[datastore] vmname/vmname.vmdk"\fR.
.PP
For remote files you can find the path using \fIvirsh\fR\|(1).  For ESXi:
.PP
.Vb 1
\& virsh \-c \*(Aqesx://esxi.example.com?no_verify=1\*(Aq dumpxml guestname
.Ve
.PP
For vCenter:
.PP
.Vb 2
\& virsh \-c \*(Aqvpx://vcenter.example.com/Datacenter/esxi.example.com?no_verify=1\*(Aq \e
\&       dumpxml guestname
.Ve
.SH "THUMBPRINTS"
.IX Header "THUMBPRINTS"
The thumbprint is a 20 byte string containing the \s-1SSL\s0 (\s-1SHA1\s0)
fingerprint of the remote VMware server and it is required when making
a remote connection.  There are two ways to obtain this.
.SS "Extracting thumbprint from ESXi or vCenter server"
.IX Subsection "Extracting thumbprint from ESXi or vCenter server"
To extract the thumbprint, log in to the ESXi hypervisor shell and run
this command:
.PP
.Vb 1
\& # openssl x509 \-in /etc/vmware/ssl/rui.crt \-fingerprint \-sha1 \-noout
.Ve
.PP
For VMware vCenter servers the thumbprint is printed on the text
console of the server or is available by logging in to the server and
using this command:
.PP
.Vb 1
\& # openssl x509 \-in /etc/vmware\-vpx/ssl/rui.crt \-fingerprint \-sha1 \-noout
.Ve
.SS "Trick: Get \s-1VDDK\s0 to tell you the thumbprint"
.IX Subsection "Trick: Get VDDK to tell you the thumbprint"
Another (easier) way to get the thumbprint of a server is to connect
to the server using a bogus thumbprint with debugging enabled:
.PP
.Vb 2
\& nbdkit \-f \-v vddk server=esxi.example.com [...] thumbprint=12
\& qemu\-img info nbd:localhost:10809
.Ve
.PP
The nbdkit process will try to connect (and fail because the
thumbprint is wrong).  However in the debug output will be a message
such as this:
.PP
.Vb 1
\& nbdkit: debug: VixDiskLibVim: Failed to verify SSL certificate: actual thumbprint=B2:31:BD:DE:9F:DB:9D:E0:78:EF:30:42:8A:41:B0:28:92:93:C8:DD expected=12
.Ve
.PP
This gives you the server’s real thumbprint.  Of course this method is
not secure since it allows a Man-in-the-Middle (\s-1MITM\s0) attack.
.SH "MANAGED OBJECT REFERENCE"
.IX Header "MANAGED OBJECT REFERENCE"
Some parameters require you to pass in the Managed Object Reference
(\*(L"moref\*(R") of an object on the VMware server.
.PP
For VMware ESXi hypervisors, the \f(CW\*(C`vm\*(C'\fR moref is a number
(eg. \f(CW\*(C`vm=moref=2\*(C'\fR).  For VMware VCenter it is a string beginning with
\&\f(CW"vm\-"\fR) (eg. \f(CW\*(C`vm=moref=vm\-16\*(C'\fR).  Across ESXi and vCenter the
numbers are different even for the same virtual machine.
.PP
If you have libvirt ≥ 3.7, the moref is available in the
\&\fIvirsh\fR\|(1) \f(CW\*(C`dumpxml\*(C'\fR output:
.PP
.Vb 4
\& $ virsh \-c \*(Aqesx://esxi.example.com?no_verify=1\*(Aq dumpxml guestname
\& ...
\& <vmware:moref>2</vmware:moref>
\& ...
.Ve
.PP
or:
.PP
.Vb 5
\& $ virsh \-c \*(Aqvpx://vcenter.example.com/Datacenter/esxi.example.com?no_verify=1\*(Aq \e
\&       dumpxml guestname
\& ...
\& <vmware:moref>vm\-16</vmware:moref>
\& ...
.Ve
.PP
An alternative way to find the moref of a \s-1VM\s0 is using the
\&\f(CW\*(C`moRefFinder.pl\*(C'\fR script written by William Lam
(http://www.virtuallyghetto.com/2011/11/vsphere\-moref\-managed\-object\-reference.html
https://blogs.vmware.com/vsphere/2012/02/uniquely\-identifying\-virtual\-machines\-in\-vsphere\-and\-vcloud\-part\-2\-technical.html).
.SH "DUMP-PLUGIN OUTPUT"
.IX Header "DUMP-PLUGIN OUTPUT"
To query more information about the plugin (and whether it is
working), use:
.PP
.Vb 1
\& nbdkit vddk \-\-dump\-plugin
.Ve
.PP
If the plugin is not present, not working or the library path is wrong
you will get an error.
.PP
If it works the output will include:
.ie n .IP """vddk_default_libdir=...""" 4
.el .IP "\f(CWvddk_default_libdir=...\fR" 4
.IX Item "vddk_default_libdir=..."
The compiled-in library path.  Use \f(CW\*(C`libdir=PATHNAME\*(C'\fR to override this
at runtime.
.ie n .IP """vddk_has_nfchostport=1""" 4
.el .IP "\f(CWvddk_has_nfchostport=1\fR" 4
.IX Item "vddk_has_nfchostport=1"
If this is printed then the \f(CW\*(C`nfchostport=PORT\*(C'\fR parameter is supported
by this build.
.ie n .IP """vddk_dll=...""" 4
.el .IP "\f(CWvddk_dll=...\fR" 4
.IX Item "vddk_dll=..."
Prints the full path to the \s-1VDDK\s0 shared library.  Since this requires
a glibc extension it may not be available in all builds of the plugin.
.SH "NOTES"
.IX Header "NOTES"
.SS "Sector size limitation"
.IX Subsection "Sector size limitation"
The \s-1VDDK\s0 plugin can only answer read/write requests on whole 512 byte
sector boundaries.  This is because the \s-1VDDK\s0 Read and Write APIs only
take sector numbers.  If your client needs finer granularity, you can
use \fInbdkit\-blocksize\-filter\fR\|(3) with the setting \f(CW\*(C`minblock=512\*(C'\fR.
.SS "Threads"
.IX Subsection "Threads"
Handling threads in the \s-1VDDK API\s0 is complex and does not map well to
any of the thread models offered by nbdkit (see
\&\*(L"\s-1THREADS\*(R"\s0 in \fInbdkit\-plugin\fR\|(3)).  The plugin uses the nbdkit
\&\f(CW\*(C`SERIALIZE_ALL_REQUESTS\*(C'\fR model, but technically even this is not
completely safe.  This is a subject of future work.
.SS "Out of memory errors"
.IX Subsection "Out of memory errors"
In the verbose log you may see errors like:
.PP
.Vb 3
\& nbdkit: vddk[3]: error: [NFC ERROR] NfcFssrvrProcessErrorMsg:
\& received NFC error 5 from server: Failed to allocate the
\& requested 2097176 bytes
.Ve
.PP
This seems especially common when there are multiple parallel
connections open to the VMware server.
.PP
These can be caused by resource limits set on the VMware server.  You
can increase the limit for the \s-1NFC\s0 service by editing
\&\fI/etc/vmware/hostd/config.xml\fR and adjusting the
\&\f(CW\*(C`<maxMemory>\*(C'\fR setting:
.PP
.Vb 6
\& <nfcsvc>
\&   <path>libnfcsvc.so</path>
\&   <enabled>true</enabled>
\&   <maxMemory>50331648</maxMemory>
\&   <maxStreamMemory>10485760</maxStreamMemory>
\& </nfcsvc>
.Ve
.PP
and restarting the \f(CW\*(C`hostd\*(C'\fR service:
.PP
.Vb 1
\& # /etc/init.d/hostd restart
.Ve
.PP
For more information see https://bugzilla.redhat.com/1614276.
.SH "SUPPORTED VERSIONS OF VDDK"
.IX Header "SUPPORTED VERSIONS OF VDDK"
This plugin requires \s-1VDDK\s0 ≥ 5.5.5, which in turn means that it
is only supported on x64\-64 platforms.
.PP
It has been tested with all versions up to 6.7 (but should work with
future versions).
.PP
\&\s-1VDDK\s0 ≥ 6.0 should be used if possible.  This is the first version
which added Flush support which is crucial for data integrity when
writing.
.SH "DEBUG FLAGS"
.IX Header "DEBUG FLAGS"
Debugging messages can be very helpful if you have problems connecting
to VMware servers, or to find the list of available transport modes,
or to diagnose \s-1SAN\s0 problems:
.PP
.Vb 1
\& nbdkit \-f \-v vddk file=FILENAME [...]
.Ve
.PP
Additional debug flags are available:
.IP "\fB\-D vddk.diskinfo=1\fR" 4
.IX Item "-D vddk.diskinfo=1"
Debug disk information returned by \f(CW\*(C`GetInfo\*(C'\fR.
.IP "\fB\-D vddk.extents=1\fR" 4
.IX Item "-D vddk.extents=1"
Debug extents returned by \f(CW\*(C`QueryAllocatedBlocks\*(C'\fR.
.IP "\fB\-D vddk.datapath=0\fR" 4
.IX Item "-D vddk.datapath=0"
Suppress debugging of datapath calls (\f(CW\*(C`Read\*(C'\fR and \f(CW\*(C`Write\*(C'\fR).
.SH "FILES"
.IX Header "FILES"
.IP "\fI\f(CI$plugindir\fI/nbdkit\-vddk\-plugin.so\fR" 4
.IX Item "$plugindir/nbdkit-vddk-plugin.so"
The plugin.
.Sp
Use \f(CW\*(C`nbdkit \-\-dump\-config\*(C'\fR to find the location of \f(CW$plugindir\fR.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW\*(C`nbdkit\-vddk\-plugin\*(C'\fR first appeared in nbdkit 1.2.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbdkit\fR\|(1),
\&\fInbdkit\-plugin\fR\|(3),
\&\fInbdkit\-blocksize\-filter\fR\|(1),
\&\fInbdkit\-readahead\-filter\fR\|(1),
\&\fInbdkit\-retry\-filter\fR\|(1),
\&\fIvirsh\fR\|(1),
https://www.vmware.com/support/developer/vddk/
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2013\-2020 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS\s0 ''\s-1AS IS\s0'' \s-1AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF
USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0

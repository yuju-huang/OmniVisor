.\" Automatically generated by Podwrapper::Man 1.21.8 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdkit-service 1"
.TH nbdkit-service 1 "2020-06-10" "nbdkit-1.21.8" "NBDKIT"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdkit\-service \- running nbdkit as a service, and systemd socket activation
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Most people start nbdkit from the command line or run it from another
program (see \fInbdkit\-captive\fR\|(1).  It is also possible to run nbdkit
as a standalone service, which is what this page describes.
.SH "SOCKET ACTIVATION"
.IX Header "SOCKET ACTIVATION"
nbdkit supports socket activation (sometimes called systemd socket
activation).  This is a simple protocol where instead of nbdkit itself
opening the listening socket(s), the parent process (typically
systemd) passes in pre-opened file descriptors.  Socket activation
lets you serve infrequent \s-1NBD\s0 requests using a superserver without
needing nbdkit to be running the whole time.
.PP
Socket activation is triggered when both the \f(CW\*(C`LISTEN_FDS\*(C'\fR and
\&\f(CW\*(C`LISTEN_PID\*(C'\fR environment variables are set.  In this mode using
\&\fI\-i\fR, \fI\-p\fR, \fI\-\-run\fR, \fI\-s\fR or \fI\-U\fR flags on the command line is
illegal and will cause an error.  Also in this mode nbdkit does not
fork into the background (ie. \fI\-f\fR is implied).
.SS "Using socket activation with systemd"
.IX Subsection "Using socket activation with systemd"
To use nbdkit with socket activation from systemd, create a unit file
ending in \f(CW\*(C`.socket\*(C'\fR (eg. \fI/etc/systemd/system/nbdkit.socket\fR)
containing:
.PP
.Vb 2
\& [Unit]
\& Description=NBDKit Network Block Device server
\& 
\& [Socket]
\& ListenStream=10809
\& 
\& [Install]
\& WantedBy=sockets.target
.Ve
.PP
There are various formats for the \f(CW\*(C`ListenStream\*(C'\fR key.  See
\&\fIsystemd.socket\fR\|(5) for more information.
.PP
Also create a service unit (eg. \fI/etc/systemd/system/nbdkit.service\fR)
containing:
.PP
.Vb 2
\& [Service]
\& ExecStart=/usr/sbin/nbdkit file /path/to/serve
.Ve
.PP
For more information on systemd and socket activation, see
http://0pointer.de/blog/projects/socket\-activation.html
.SH "LOGGING"
.IX Header "LOGGING"
Error messages from nbdkit can be sent to standard error
(\fI\-\-log=stderr\fR), or to the system log (\fI\-\-log=syslog\fR), or can be
discarded completely (\fI\-\-log=null\fR, not recommended for normal use).
.PP
The default, if \fI\-\-log\fR is not specified on the command line, is to
send error messages to stderr, unless nbdkit forks into the background
in which case they are sent to syslog.
.PP
In detail:
.IP "Messages go to standard error (stderr):" 4
.IX Item "Messages go to standard error (stderr):"
When running from the command line in the foreground.
.Sp
When using systemd socket activation.
.Sp
Using \fI\-\-log=stderr\fR forces all messages to go to standard error.
.IP "Messages go to the system log (syslog):" 4
.IX Item "Messages go to the system log (syslog):"
When running from the command line, forked into the background.
.Sp
Using \fI\-\-log=syslog\fR forces all messages to go to the system log.
.PP
Debug messages (\fI\-v\fR/\fI\-\-verbose\fR) always go to standard error and
are never sent to the system log.
.SH "AF_VSOCK"
.IX Header "AF_VSOCK"
On Linux nbdkit supports the \f(CW\*(C`AF_VSOCK\*(C'\fR address family / protocol.
This allows you to serve \s-1NBD\s0 devices into virtual machines without
using a regular network connection.
.PP
\&\fBNote\fR that this is different from the usual case where you present
\&\s-1NBD\s0 as a virtual block device to a guest (which the guest sees as
something like a \s-1SATA\s0 or virtio-scsi disk).  With \f(CW\*(C`AF_VSOCK\*(C'\fR the
virtual machine sees a raw \s-1NBD\s0 socket which it can connect to by
opening an \f(CW\*(C`AF_VSOCK\*(C'\fR connection.  Only libnbd supports \f(CW\*(C`AF_VSOCK\*(C'\fR
\&\s-1NBD\s0 client connections at the time of writing (2019).  For more about
this protocol, see https://wiki.qemu.org/Features/VirtioVsock
.SS "\s-1AF_VSOCK\s0 example"
.IX Subsection "AF_VSOCK example"
To set up an \f(CW\*(C`AF_VSOCK\*(C'\fR server, use for example:
.PP
.Vb 1
\& nbdkit \-\-vsock [\-\-port PORT] memory 1G
.Ve
.PP
The optional \fI\-p\fR/\fI\-\-port\fR argument is used to change the
\&\f(CW\*(C`AF_VSOCK\*(C'\fR port number.  These port numbers exist in a different
namespace from \s-1TCP/IP\s0 port numbers.  Also unlike \s-1TCP,\s0 the port numbers
are 32 bit.  The default port is 10809.
.PP
The guest that wishes to access nbdkit must be configured for
virtio-vsock.  On the qemu command line use:
.PP
.Vb 1
\& qemu ... \-device vhost\-vsock\-pci,id=vhost\-vsock\-pci0
.Ve
.PP
For libvirt add this element to the \f(CW\*(C`<devices>\*(C'\fR section:
.PP
.Vb 1
\& <vsock/>
.Ve
.PP
If you see the error \f(CW\*(C`unable to open vhost\-vsock device\*(C'\fR then you may
have to unload the \s-1VMCI\s0 transport on the host:
.PP
.Vb 1
\& modprobe \-r vmw_vsock_vmci_transport
.Ve
.PP
Once nbdkit and the guest are running, from inside the guest you can
connect to nbdkit on the host using libnbd:
.PP
.Vb 1
\& nbdsh \-c \*(Aqh.connect_vsock(2, 10809)\*(Aq \-c \*(Aqprint(h.get_size())\*(Aq
.Ve
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.ie n .IP """LISTEN_FDS""" 4
.el .IP "\f(CWLISTEN_FDS\fR" 4
.IX Item "LISTEN_FDS"
.PD 0
.ie n .IP """LISTEN_PID""" 4
.el .IP "\f(CWLISTEN_PID\fR" 4
.IX Item "LISTEN_PID"
.PD
If present in the environment when nbdkit starts up, these trigger
\&\*(L"\s-1SOCKET ACTIVATION\*(R"\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbdkit\fR\|(1),
\&\fInbdkit\-exitlast\-filter\fR\|(1),
\&\fInbdkit\-ip\-filter\fR\|(1),
\&\fInbdkit\-limit\-filter\fR\|(1),
\&\fIsystemd\fR\|(1),
\&\fIsystemd.socket\fR\|(5),
\&\fIsyslog\fR\|(3),
\&\fIrsyslogd\fR\|(8),
\&\fIjournalctl\fR\|(1),
\&\fInbdsh\fR\|(1).
.SH "AUTHORS"
.IX Header "AUTHORS"
Eric Blake
.PP
Richard W.M. Jones
.PP
Pino Toscano
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2013\-2020 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS\s0 ''\s-1AS IS\s0'' \s-1AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF
USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0

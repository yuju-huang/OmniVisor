.\" Automatically generated by Podwrapper::Man 1.21.8 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "nbdkit-memory-plugin 1"
.TH nbdkit-memory-plugin 1 "2020-06-10" "nbdkit-1.21.8" "NBDKIT"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nbdkit\-memory\-plugin \- nbdkit virtual memory (RAM disk) plugin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& nbdkit memory [size=]SIZE
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`nbdkit\-memory\-plugin\*(C'\fR is a plugin for \fInbdkit\fR\|(1) which stores a
single disk image in virtual memory, and discards it when nbdkit
exits.  This plugin can be used for testing or where you don't care
about the final content of the disk image.
.PP
All nbdkit clients will see the same disk content, initially all
zeroes.
.PP
The disk image is stored in memory using a sparse array.  The
allocated parts of the disk image cannot be larger than physical \s-1RAM\s0
plus swap, less whatever is being used by the rest of the system.  If
you want to allocate more space than this use \fInbdkit\-file\-plugin\fR\|(1)
backed by a temporary file instead.
.PP
However the virtual size can be as large as you like, up to the
maximum supported by nbdkit (2⁶³\-1 bytes).  This limit is tested
when nbdkit is compiled, and it should work on all platforms and
architectures supported by nbdkit.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Create a one gigabyte sparse \s-1RAM\s0 disk:
.PP
.Vb 1
\& nbdkit memory 1G
.Ve
.PP
If you want to loop mount the above disk, see \fInbdkit\-loop\fR\|(1).
.PP
Create the largest possible \s-1RAM\s0 disk:
.PP
.Vb 1
\& nbdkit memory $(( 2**63 \- 1 ))
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "[\fBsize=\fR]SIZE" 4
.IX Item "[size=]SIZE"
Specify the virtual size of the disk image.
.Sp
This parameter is required.
.Sp
\&\f(CW\*(C`size=\*(C'\fR is a magic config key and may be omitted in most cases.
See \*(L"Magic parameters\*(R" in \fInbdkit\fR\|(1).
.SH "NOTES"
.IX Header "NOTES"
.SS "Preloading small amounts of data"
.IX Subsection "Preloading small amounts of data"
If you want an in-memory disk image preinitialized with a small amount
of data specified on the command line, look at
\&\fInbdkit\-data\-plugin\fR\|(1) instead.  Note by \*(L"small\*(R" this does not mean
that the virtual disk image must be small, but that the amount of data
initially stored sparsely is small enough to specify on the command
line.
.SS "Preloading large amounts of data"
.IX Subsection "Preloading large amounts of data"
If you want to preload a large amount of data (eg. a disk image) into
the memory plugin, use \fIqemu\-img\fR\|(1):
.PP
.Vb 2
\& $ rm \-f pid
\& $ nbdkit \-P pid memory 10G
\& 
\& # wait for nbdkit to become ready to accept connections:
\& $ while [ ! \-f pid ]; do sleep 1; done
\& 
\& # preload Fedora disk image:
\& $ virt\-builder fedora\-28 \-\-size=10G
\& $ qemu\-img convert \-p \-n fedora\-28.img nbd:localhost:10809
.Ve
.SH "FILES"
.IX Header "FILES"
.IP "\fI\f(CI$plugindir\fI/nbdkit\-memory\-plugin.so\fR" 4
.IX Item "$plugindir/nbdkit-memory-plugin.so"
The plugin.
.Sp
Use \f(CW\*(C`nbdkit \-\-dump\-config\*(C'\fR to find the location of \f(CW$plugindir\fR.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW\*(C`nbdkit\-memory\-plugin\*(C'\fR first appeared in nbdkit 1.2.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInbdkit\fR\|(1),
\&\fInbdkit\-plugin\fR\|(3),
\&\fInbdkit\-loop\fR\|(1),
\&\fInbdkit\-data\-plugin\fR\|(1),
\&\fInbdkit\-file\-plugin\fR\|(1),
\&\fInbdkit\-info\-plugin\fR\|(1),
\&\fInbdkit\-tmpdisk\-plugin\fR\|(1).
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2017\-2020 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS\s0 ''\s-1AS IS\s0'' \s-1AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF
USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.\s0

# nbdkit
# Common functions used by the tests.
# @configure_input@
# Copyright (C) 2017-2020 Red Hat Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# * Neither the name of Red Hat nor the names of its contributors may be
# used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS ''AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# cleanup_fn f [args]
#
# A generic trap handling function.  This runs the function or command
# f plus optional args when the script exits for any reason.
declare -a _cleanup_hook
cleanup_fn ()
{
    _cleanup_hook[${#_cleanup_hook[@]}]="$@"
}

_run_cleanup_hooks ()
{
    local _status=$? _i

    set +e
    trap '' INT QUIT TERM EXIT ERR
    echo $0: run cleanup hooks: exit code $_status

    for (( _i = 0; _i < ${#_cleanup_hook[@]}; ++_i )); do
        ${_cleanup_hook[_i]}
    done

    exit $_status
}
trap _run_cleanup_hooks INT QUIT TERM EXIT ERR

# requires program [args]
#
# Check that ‘program [args]’ works.  If not, skip the test.
# For example to check that qemu-img is available, do:
#
# requires qemu-img --version
requires ()
{
    ( "$@" ) </dev/null >/dev/null 2>&1 || {
        echo "$0: ‘$*’ failed with error code $?"
        echo "$0: test prerequisite is missing or not working"
        exit 77
    }
}

# qemu cannot connect to ::1 if IPv6 is disabled because of
# the way it uses getaddrinfo.  See:
# https://bugzilla.redhat.com/show_bug.cgi?id=808147
# https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/SXDLSZ3GKXL6NDAKP4MPJ25IMHKN67X3/
requires_ipv6_loopback ()
{
    requires qemu-img --version

    # This should fail with "Connection refused".  If IPv6 is broken
    # then it fails with "Address family for hostname not supported"
    # instead.  It's very unlikely that port 1 is open.
    if LANG=C qemu-img info "nbd:[::1]:1" |& \
       grep -sq "Address family for hostname not supported"; then
        echo "$0: IPv6 loopback is not available, skipping this test"
        exit 77
    fi
}

# Test host kernel is Linux and minimum version.  It's usually better
# to test features rather than using this, but there are cases where
# testing features of the current kernel is too hard.
requires_linux_kernel_version ()
{
    local kver

    # Test the kernel is Linux.
    requires test "$(uname -s)" = "Linux"

    # Test that it's the minimum version.
    requires cut --version
    requires bc --version
    kver=$(uname -r | cut -d. -f1-2)
    requires test "$(echo "$kver >= $1" | bc -l)" = "1"
}

# start_nbdkit -P pidfile args...
#
# Run nbdkit with args and wait for it to start up.  If it fails to
# start up, exit with an error message.  Also a cleanup handler is
# installed automatically which kills nbdkit on exit.
start_nbdkit ()
{
    local _pidfile _i

    # -P <pidfile> must be the first two parameters.
    if [ "$1" != "-P" ]; then
       echo "$0: start_nbdkit: -P <pidfile> option must be first"
       exit 1
    fi
    _pidfile="$2"

    # Run nbdkit.
    nbdkit -v "$@"

    # Wait for the pidfile to appear.
    for _i in {1..60}; do
        if test -s "$_pidfile"; then
            break
        fi
        sleep 1
    done
    if ! test -s "$_pidfile"; then
        echo "$0: start_nbdkit: PID file $_pidfile was not created"
        exit 1
    fi

    # Kill nbdkit on exit.
    cleanup_fn kill_nbdkit "$(cat "$_pidfile")"
}

# kill_nbdkit pid
#
# End the nbkdit process with the given pid.  Exit this script with an
# error if nbdkit does not gracefully shutdown in a timely manner.
kill_nbdkit ()
{
    local pid=$1 i

    # Start with SIGTERM, and wait for graceful exit
    kill $pid
    for i in {1..60}; do
        if ! kill -0 $pid 2>/dev/null; then
            break
        fi
        sleep 1
    done
    # If nbdkit has not exited, try SIGKILL and fail the test
    if test $i = 60; then
        echo "error: nbdkit pid $pid failed to respond to SIGTERM"
        kill -9 $pid
        # Append our failure after other cleanups
        cleanup_fn exit 1
    fi
}

# foreach_plugin f [args]
#
# For each plugin that was built, run the function or command f with
# the plugin name as the first argument, optionally followed by the
# remaining args.
foreach_plugin ()
{
    local f d p

    f="$1"
    shift

    for p in @plugins@; do
        # Was the plugin built?
        d="@top_builddir@/plugins/$p"
        if [ -f "$d/.libs/nbdkit-$p-plugin.so" ] ||
           [ -f "$d/nbdkit-$p-plugin" ]; then
            # Yes so run the test.
            "$f" "$p" "$@"
        fi
    done
}

# pick_unused_port
#
# Picks and returns an "unused" port, setting the global variable
# $port.
#
# This is inherently racy so we only use it where it's absolutely
# necessary (eg. testing TLS because qemu cannot do TLS over a Unix
# domain socket).
pick_unused_port ()
{
    requires ss --version

    # Start at a random port to make it less likely that two parallel
    # tests will conflict.
    port=$(( 50000 + (RANDOM%15000) ))
    while ss -ltn | grep -sqE ":$port\b"; do
        ((port++))
        if [ $port -eq 65000 ]; then port=50000; fi
    done
    echo picked unused port $port
}
